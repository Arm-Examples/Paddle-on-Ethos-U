# automatically generated by the FlatBuffers compiler, do not modify

# namespace: proto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VarType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVarType(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VarType()
        x.Init(buf, n + offset)
        return x

    # VarType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VarType
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # VarType
    def SelectedRows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from paddle.lite.fbs.proto.VarType_.TensorDesc import TensorDesc
            obj = TensorDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarType
    def DenseTensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from paddle.lite.fbs.proto.VarType_.DenseTensorDesc import DenseTensorDesc
            obj = DenseTensorDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarType
    def TensorArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from paddle.lite.fbs.proto.VarType_.DenseTensorArrayDesc import DenseTensorArrayDesc
            obj = DenseTensorArrayDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarType
    def Reader(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from paddle.lite.fbs.proto.VarType_.ReaderDesc import ReaderDesc
            obj = ReaderDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarType
    def Tuple(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from paddle.lite.fbs.proto.VarType_.Tuple import Tuple
            obj = Tuple()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VarTypeStart(builder): builder.StartObject(6)
def VarTypeAddType(builder, type): builder.PrependInt32Slot(0, type, 0)
def VarTypeAddSelectedRows(builder, selectedRows): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(selectedRows), 0)
def VarTypeAddDenseTensor(builder, denseTensor): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(denseTensor), 0)
def VarTypeAddTensorArray(builder, tensorArray): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tensorArray), 0)
def VarTypeAddReader(builder, reader): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(reader), 0)
def VarTypeAddTuple(builder, tuple): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tuple), 0)
def VarTypeEnd(builder): return builder.EndObject()
