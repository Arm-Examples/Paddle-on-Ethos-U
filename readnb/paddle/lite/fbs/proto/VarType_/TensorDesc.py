# automatically generated by the FlatBuffers compiler, do not modify

# namespace: VarType_

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TensorDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTensorDesc(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TensorDesc()
        x.Init(buf, n + offset)
        return x

    # TensorDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TensorDesc
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TensorDesc
    def Dims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TensorDesc
    def DimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # TensorDesc
    def DimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TensorDesc
    def DimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def TensorDescStart(builder): builder.StartObject(2)
def TensorDescAddDataType(builder, dataType): builder.PrependInt32Slot(0, dataType, 0)
def TensorDescAddDims(builder, dims): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dims), 0)
def TensorDescStartDimsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def TensorDescEnd(builder): return builder.EndObject()
