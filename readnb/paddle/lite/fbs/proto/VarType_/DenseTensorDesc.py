# automatically generated by the FlatBuffers compiler, do not modify

# namespace: VarType_

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DenseTensorDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDenseTensorDesc(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DenseTensorDesc()
        x.Init(buf, n + offset)
        return x

    # DenseTensorDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DenseTensorDesc
    def Tensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from paddle.lite.fbs.proto.VarType_.TensorDesc import TensorDesc
            obj = TensorDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DenseTensorDesc
    def LodLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def DenseTensorDescStart(builder): builder.StartObject(2)
def DenseTensorDescAddTensor(builder, tensor): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tensor), 0)
def DenseTensorDescAddLodLevel(builder, lodLevel): builder.PrependInt32Slot(1, lodLevel, 0)
def DenseTensorDescEnd(builder): return builder.EndObject()
