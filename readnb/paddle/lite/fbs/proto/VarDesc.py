# automatically generated by the FlatBuffers compiler, do not modify

# namespace: proto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VarDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVarDesc(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VarDesc()
        x.Init(buf, n + offset)
        return x

    # VarDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VarDesc
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VarDesc
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from paddle.lite.fbs.proto.VarType import VarType
            obj = VarType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VarDesc
    def Persistable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VarDesc
    def NeedCheckFeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def VarDescStart(builder): builder.StartObject(4)
def VarDescAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def VarDescAddType(builder, type): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def VarDescAddPersistable(builder, persistable): builder.PrependBoolSlot(2, persistable, 0)
def VarDescAddNeedCheckFeed(builder, needCheckFeed): builder.PrependBoolSlot(3, needCheckFeed, 0)
def VarDescEnd(builder): return builder.EndObject()
