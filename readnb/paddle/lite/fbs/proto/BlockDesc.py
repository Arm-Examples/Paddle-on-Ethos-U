# automatically generated by the FlatBuffers compiler, do not modify

# namespace: proto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BlockDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBlockDesc(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BlockDesc()
        x.Init(buf, n + offset)
        return x

    # BlockDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BlockDesc
    def Idx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BlockDesc
    def ParentIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BlockDesc
    def Vars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from paddle.lite.fbs.proto.VarDesc import VarDesc
            obj = VarDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BlockDesc
    def VarsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BlockDesc
    def VarsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # BlockDesc
    def Ops(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from paddle.lite.fbs.proto.OpDesc import OpDesc
            obj = OpDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BlockDesc
    def OpsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BlockDesc
    def OpsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # BlockDesc
    def ForwardBlockIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

def BlockDescStart(builder): builder.StartObject(5)
def BlockDescAddIdx(builder, idx): builder.PrependInt32Slot(0, idx, 0)
def BlockDescAddParentIdx(builder, parentIdx): builder.PrependInt32Slot(1, parentIdx, 0)
def BlockDescAddVars(builder, vars): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vars), 0)
def BlockDescStartVarsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BlockDescAddOps(builder, ops): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ops), 0)
def BlockDescStartOpsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BlockDescAddForwardBlockIdx(builder, forwardBlockIdx): builder.PrependInt32Slot(4, forwardBlockIdx, -1)
def BlockDescEnd(builder): return builder.EndObject()
